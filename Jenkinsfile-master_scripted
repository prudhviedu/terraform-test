properties([[$class: 'JiraProjectProperty'], parameters([choice(choices: ['test-env', 'dev-env', 'preprod-env', 'alpha-env', 'beta-env', 'prod-env'], description: '', name: 'deploy_env'), string(defaultValue: 'us-east-1', description: '', name: 'deploy_region', trim: true), string(description: '', name: 'tagVersion', trim: true)])])
node {
    stage('checkout') {
        checkout([$class: 'GitSCM', branches: [[name: "${params.tagVersion}"]],
              userRemoteConfigs: [[url: 'https://github.com/prudhviedu/terraform-test.git',
                                   credentialsId: 'GitUI']]
        ])
    }
    go("${params.deploy_env}", "${params.deploy_region}", "{params.tagVersion}")
}
def go(deploy_env, deploy_region, tagVersion) {
    echo "deploying the ${tagVersion} code in ${deploy_env}, region ${deploy_region}"
    echo "Running the check to see which files got effected"
    def git_changed_dir = get_changed_dir()
    echo "changed directories are ${git_changed_dir}"
    for (i = 0; i < git_changed_dir.size(); i++) {
        def tool_name = git_changed_dir[i]
        if (tool_name.trim() != "") {

                if ( tool_name == "packer") {
                        try {
                                echo "Running PACKER"
				run_packer(deploy_env, deploy_region)
                        } catch (e) {
                                throw e
                        }
                        try {
                                echo "Running Terraform"
				run_terraform(deploy_env, deploy_region)
                        } catch (e) {
                                throw e
                        }
                        try {
                                echo "Running Ansible"
				run_ansible(deploy_env, deploy_region)
                        } catch (e) {
                                throw e
                        }
			break;
                } else if ( tool_name == "terraform" ) {
			try {
                        	echo "Running Terraform"
				run_terraform(deploy_env, deploy_region)
			} catch (e) {
			        throw e
			}
                        try {   
                                echo "Running Ansible"
				run_ansible(deploy_env, deploy_region)
                        } catch (e) { 
                                throw e       
                        }    			
                        break;
                } else if ( tool_name == "ansible" ) {
                        try {
                                echo "Running Ansible"
				run_ansible(deploy_env, deploy_region)
                        } catch (e) {
                                throw e
                        }
                        break;
                } else {
                        echo "There was no change in packer, terraform and ansible related code... no build process..."
		}
            }
        }
}

def get_changed_dir() {
    sh "build-support/check-effected.sh > effected_dir"
    readFileIntoLines("effected_dir")
}
def readFileIntoLines(filename) {
    def contents = readFile(filename)
    if (contents.trim() == "") {
        return []
    } else {
        return contents.split("\n")
    }
}

def run_packer(deploy_env, deploy_region) {
   sh "build-support/run_packer.sh ${deploy_env} ${deploy_region}"
}

def run_terraform(deploy_env, deploy_region) {
   sh "build-support/run_terraform.sh ${deploy_env} ${deploy_region}"
}

def run_ansible(deploy_env, deploy_region) {
   sh "build-support/run_ansible.sh ${deploy_env} ${deploy_region}"
}
